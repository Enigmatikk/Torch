//! # Torch ORM Example - Laravel Eloquent-style Active Record
//!
//! This example demonstrates the concepts and API of the Torch ORM,
//! which provides Laravel Eloquent-style Active Record functionality for Rust.
//!
//! ## Running this example
//!
//! Run: `cargo run --example orm_example --features database`
//!
//! Note: This example demonstrates the ORM API without requiring a real database.
//! For actual database operations, set up PostgreSQL and configure DATABASE_URL.

use serde::{Deserialize, Serialize};

/// User model - represents a user in the system
///
/// In a real implementation, this would use:
/// ```rust
/// use torch_web::orm::{Model, Timestamps, HasRelationships, impl_model, impl_timestamps, impl_from_row};
///
/// impl_model!(User, table = "users", primary_key = "id", primary_key_type = i32);
/// impl_timestamps!(User);
/// impl_from_row!(User, { id, name, email, active, created_at, updated_at });
/// ```
#[derive(Debug, Clone, Serialize, Deserialize)]
struct User {
    pub id: Option<i32>,
    pub name: String,
    pub email: String,
    pub active: bool,
    pub created_at: Option<chrono::DateTime<chrono::Utc>>,
    pub updated_at: Option<chrono::DateTime<chrono::Utc>>,
}

impl User {
    /// Create a new user
    pub fn new(name: String, email: String) -> Self {
        Self {
            id: None,
            name,
            email,
            active: true,
            created_at: None,
            updated_at: None,
        }
    }

    /// Custom validation for users
    pub fn validate(&self) -> Result<(), String> {
        if self.email.is_empty() {
            return Err("Email is required".to_string());
        }
        if !self.email.contains('@') {
            return Err("Invalid email format".to_string());
        }
        Ok(())
    }

    /// Set timestamps (simulates ORM behavior)
    pub fn touch(&mut self) {
        let now = chrono::Utc::now();
        if self.created_at.is_none() {
            self.created_at = Some(now);
        }
        self.updated_at = Some(now);
    }

    /// Simulate saving to database
    pub async fn save(&mut self) -> Result<(), String> {
        self.validate()?;
        self.touch();

        if self.id.is_none() {
            // Simulate creating new record
            self.id = Some(1); // Would be generated by database
            println!("‚úÖ User created with ID: {}", self.id.unwrap());
        } else {
            // Simulate updating existing record
            println!("‚úÖ User {} updated", self.id.unwrap());
        }

        Ok(())
    }
}

/// Post model - represents a blog post
#[derive(Debug, Clone, Serialize, Deserialize)]
struct Post {
    pub id: Option<i32>,
    pub user_id: i32,
    pub title: String,
    pub content: String,
    pub published: bool,
    pub created_at: Option<chrono::DateTime<chrono::Utc>>,
    pub updated_at: Option<chrono::DateTime<chrono::Utc>>,
}

impl Post {
    #[allow(dead_code)]
    pub fn new(user_id: i32, title: String, content: String) -> Self {
        Self {
            id: None,
            user_id,
            title,
            content,
            published: false,
            created_at: None,
            updated_at: None,
        }
    }
}

/// Profile model - one-to-one with User
#[derive(Debug, Clone, Serialize, Deserialize)]
struct Profile {
    pub id: Option<i32>,
    pub user_id: i32,
    pub bio: Option<String>,
    pub avatar_url: Option<String>,
    pub website: Option<String>,
    pub created_at: Option<chrono::DateTime<chrono::Utc>>,
    pub updated_at: Option<chrono::DateTime<chrono::Utc>>,
}

/// Role model - for many-to-many relationship with User
#[derive(Debug, Clone, Serialize, Deserialize)]
struct Role {
    pub id: Option<i32>,
    pub name: String,
    pub description: Option<String>,
    pub created_at: Option<chrono::DateTime<chrono::Utc>>,
    pub updated_at: Option<chrono::DateTime<chrono::Utc>>,
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("üî• Torch ORM Example - Laravel Eloquent-style Active Record");
    println!();
    println!("This example demonstrates the ORM concepts and API design.");
    println!("For actual database operations, enable the database feature and configure a connection.");
    println!();
    
    // Example 1: Creating and saving models
    println!("üìù Example 1: Creating and saving models");

    let mut user = User::new("John Doe".to_string(), "john@example.com".to_string());

    // Validate and save the user
    user.save().await?;
    println!("User after save: {:?}", user);
    println!();
    
    // Example 2: Query builder usage (API demonstration)
    println!("üìä Example 2: Query builder usage");

    println!("With a real database, you could use:");
    println!("  üîç User::query().where_eq('active', true).get().await");
    println!("  üîç User::query().where_like('email', '%@gmail.com').get().await");
    println!("  üîç Post::query().where_eq('published', true).order_by_desc('created_at').limit(10).get().await");
    println!("  üîç User::query().where_between('created_at', start, end).count().await");
    println!("  üîç User::query().where_in('status', ['active', 'pending']).paginate(1, 20).await");
    println!();
    
    // Example 3: Relationships (API demonstration)
    println!("üîó Example 3: Relationships");

    println!("With a real database, relationships would work like:");
    println!("  üîó user.posts().get().await - Get all posts for a user (HasMany)");
    println!("  üîó user.profile().first().await - Get user's profile (HasOne)");
    println!("  üîó user.roles().get().await - Get user's roles (BelongsToMany)");
    println!("  üîó post.user().first().await - Get post's author (BelongsTo)");
    println!("  üîó user.posts().where_eq('published', true).get().await - Constrained relationships");
    println!();
    
    // Example 4: Advanced queries
    println!("üîç Example 4: Advanced queries");
    
    println!("Advanced query examples:");
    println!("  - User::query().where_in('status', ['active', 'pending']).get()");
    println!("  - Post::query().where_between('created_at', start, end).count()");
    println!("  - User::query().where_not_null('email_verified_at').paginate(1, 20)");
    println!();
    
    // Example 5: Aggregations
    println!("üìà Example 5: Aggregations");
    
    println!("Aggregation examples:");
    println!("  - User::count() - Count all users");
    println!("  - Post::query().where_eq('published', true).count()");
    println!("  - User::query().where_eq('active', true).exists()");
    println!();
    
    // Example 6: Model validation
    println!("‚úÖ Example 6: Model validation");

    let invalid_user = User::new("Test User".to_string(), "invalid-email".to_string());

    match invalid_user.validate() {
        Ok(_) => println!("User is valid"),
        Err(e) => println!("Validation error: {}", e),
    }
    println!();

    // Example 7: Timestamps
    println!("‚è∞ Example 7: Automatic timestamps");

    let mut user = User::new("Timestamp User".to_string(), "timestamp@example.com".to_string());
    user.touch(); // Set timestamps
    println!("User with timestamps: {:?}", user);
    println!();

    println!("üéâ ORM example completed!");
    println!();
    println!("üìö Key Features Demonstrated:");
    println!("   ‚úÖ Laravel Eloquent-style Active Record pattern");
    println!("   ‚úÖ Fluent query builder with method chaining");
    println!("   ‚úÖ Model relationships (HasMany, BelongsTo, etc.)");
    println!("   ‚úÖ Automatic timestamp management");
    println!("   ‚úÖ Model validation");
    println!("   ‚úÖ Type-safe database operations");
    println!("   ‚úÖ Async/await support");
    println!();
    println!("üí° To use with a real database:");
    println!("   1. Set up PostgreSQL with the required tables");
    println!("   2. Set DATABASE_URL environment variable");
    println!("   3. Uncomment the database operations in this example");
    println!("   4. Run: cargo run --example orm_example --features database");
    println!();
    println!("üîó Learn more:");
    println!("   üìñ Documentation: docs/ORM.md");
    println!("   üêô GitHub: https://github.com/Enigmatikk/Torch");

    Ok(())
}
