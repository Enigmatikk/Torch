//! User - Generated by Torch CLI
//!
//! This model uses Torch's Laravel Eloquent-style ORM for database operations.

use serde::{Deserialize, Serialize};

#[cfg(feature = "database")]
use torch_web::orm::{Model, Timestamps, HasRelationships, impl_model, impl_timestamps, impl_from_row};

/// User model with Active Record functionality
#[derive(Debug, Clone, Serialize, Deserialize)]
#[cfg_attr(feature = "database", derive(sqlx::FromRow))]
pub struct User {
    /// Primary key
    pub id: Option<i32>,

    // TODO: Add your model fields here
    // Example fields:
    // pub name: String,
    // pub email: String,
    // pub active: bool,

    /// Timestamp fields (automatically managed)
    #[cfg(feature = "database")]
    pub created_at: Option<chrono::DateTime<chrono::Utc>>,
    #[cfg(feature = "database")]
    pub updated_at: Option<chrono::DateTime<chrono::Utc>>,
}

// Implement ORM traits when database feature is enabled
#[cfg(feature = "database")]
impl_model!(User, table = "users", primary_key = "id", primary_key_type = i32);

#[cfg(feature = "database")]
impl_timestamps!(User);

#[cfg(feature = "database")]
impl_from_row!(User, { id, created_at, updated_at });

impl User {
    /// Create a new instance
    pub fn new() -> Self {
        Self {
            id: None,
            // TODO: Initialize your fields
            #[cfg(feature = "database")]
            created_at: None,
            #[cfg(feature = "database")]
            updated_at: None,
        }
    }

    /// Custom validation logic
    #[cfg(feature = "database")]
    pub fn validate(&self) -> torch_web::orm::Result<()> {
        // TODO: Add your validation rules here
        Ok(())
    }

    // TODO: Add relationship methods here
    // TODO: Add custom query methods here
}

// Implement Default trait
impl Default for User {
    fn default() -> Self {
        Self::new()
    }
}