//! Code generation commands

use crate::cli::Generator;
use colored::*;
use std::fs;
use std::path::Path;

/// Generate code based on the generator type
pub fn generate(generator: Generator) -> Result<(), Box<dyn std::error::Error>> {
    match generator {
        Generator::Controller { name, resource, api } => {
            generate_controller(&name, resource, api)?;
        }
        Generator::Model { name, migration, factory, seeder, policy } => {
            generate_model(&name, migration, factory, seeder, policy)?;
        }
        Generator::Middleware { name } => {
            generate_middleware(&name)?;
        }
        Generator::Template { name, layout } => {
            generate_template(&name, layout.as_deref())?;
        }
        Generator::Migration { name, create, table } => {
            generate_migration(&name, create.as_deref(), table.as_deref())?;
        }
        Generator::Seeder { name } => {
            generate_seeder(&name)?;
        }
        Generator::Factory { name, model } => {
            generate_factory(&name, model.as_deref())?;
        }
        Generator::Policy { name, model } => {
            generate_policy(&name, model.as_deref())?;
        }
        Generator::Event { name } => {
            generate_event(&name)?;
        }
        Generator::Listener { name, event } => {
            generate_listener(&name, event.as_deref())?;
        }
        Generator::Job { name, sync } => {
            generate_job(&name, sync)?;
        }
        Generator::Notification { name } => {
            generate_notification(&name)?;
        }
        Generator::Test { name, unit } => {
            super::test::generate_test(&name, unit)?;
        }
        Generator::Command { name } => {
            generate_command(&name)?;
        }
    }
    Ok(())
}

fn generate_controller(name: &str, resource: bool, api: bool) -> Result<(), Box<dyn std::error::Error>> {
    println!("{} Generating controller: {}", "🎮".yellow(), name.cyan().bold());
    
    let controller_name = if name.ends_with("Controller") {
        name.to_string()
    } else {
        format!("{}Controller", name)
    };
    
    let filename = format!("src/controllers/{}.rs", controller_name.to_lowercase());
    
    // Create controllers directory if it doesn't exist
    fs::create_dir_all("src/controllers")?;
    
    let content = if resource {
        if api {
            generate_api_resource_controller(&controller_name)
        } else {
            generate_resource_controller(&controller_name)
        }
    } else {
        generate_basic_controller(&controller_name)
    };
    
    fs::write(&filename, content)?;
    
    println!("{} Controller created: {}", "✅".green(), filename);
    
    if resource {
        if api {
            println!("{} API resource controller includes: index, show, store, update, destroy", "💡".blue());
        } else {
            println!("{} Resource controller includes: index, show, create, update, delete", "💡".blue());
        }
    }
    
    Ok(())
}

fn generate_basic_controller(name: &str) -> String {
    format!(r#"//! {} - Generated by Torch CLI

use torch_web::{{Request, Response, extractors::*}};

pub struct {} {{}}

impl {} {{
    /// Handle requests
    pub async fn handle(req: Request) -> Response {{
        Response::ok().body("Hello from {}!")
    }}
}}
"#, name, name, name, name)
}

fn generate_resource_controller(name: &str) -> String {
    let model_name = name.replace("Controller", "");
    
    format!(r#"//! {} - Generated by Torch CLI

use torch_web::{{Request, Response, extractors::*}};
use serde::{{Deserialize, Serialize}};

pub struct {} {{}}

#[derive(Deserialize)]
pub struct Create{}Request {{
    // Add your fields here
}}

#[derive(Deserialize)]
pub struct Update{}Request {{
    // Add your fields here
}}

impl {} {{
    /// GET / - List all {}s
    pub async fn index(Query(params): Query<std::collections::HashMap<String, String>>) -> Response {{
        // TODO: Fetch {}s from database
        Response::ok().json(&serde_json::json!({{
            "{}s": [],
            "message": "List all {}s"
        }}))
    }}
    
    /// GET /:id - Show specific {}
    pub async fn show(Path(id): Path<u32>) -> Response {{
        // TODO: Fetch {} from database
        Response::ok().json(&serde_json::json!({{
            "id": id,
            "message": "Show {} {{}}"
        }}))
    }}
    
    /// POST / - Create new {}
    pub async fn create(Json(req): Json<Create{}Request>) -> Response {{
        // TODO: Create {} in database
        Response::created().json(&serde_json::json!({{
            "message": "{} created successfully"
        }}))
    }}
    
    /// PUT /:id - Update {}
    pub async fn update(Path(id): Path<u32>, Json(req): Json<Update{}Request>) -> Response {{
        // TODO: Update {} in database
        Response::ok().json(&serde_json::json!({{
            "id": id,
            "message": "{} updated successfully"
        }}))
    }}
    
    /// DELETE /:id - Delete {}
    pub async fn delete(Path(id): Path<u32>) -> Response {{
        // TODO: Delete {} from database
        Response::ok().json(&serde_json::json!({{
            "id": id,
            "message": "{} deleted successfully"
        }}))
    }}
}}
"#, 
        name, name, model_name, model_name, name,
        model_name.to_lowercase(), model_name.to_lowercase(),
        model_name.to_lowercase(), model_name.to_lowercase(),
        model_name, model_name, model_name,
        model_name, name, model_name, model_name,
        model_name, name, model_name, model_name,
        model_name, model_name, model_name
    )
}

fn generate_model(name: &str, migration: bool, factory: bool, seeder: bool, policy: bool) -> Result<(), Box<dyn std::error::Error>> {
    println!("{} Generating model: {}", "📊".yellow(), name.cyan().bold());

    let model_name = if name.ends_with("Model") {
        name.to_string()
    } else {
        name.to_string()
    };

    let filename = format!("src/models/{}.rs", model_name.to_lowercase());

    // Create models directory if it doesn't exist
    fs::create_dir_all("src/models")?;

    let content = generate_model_content(&model_name);
    fs::write(&filename, content)?;

    println!("{} Model created: {}", "✅".green(), filename);

    // Generate additional files if requested
    if migration {
        generate_migration(&format!("create_{}_table", model_name.to_lowercase()), None, None)?;
    }

    if factory {
        generate_factory(&format!("{}Factory", model_name), Some(&model_name))?;
    }

    if seeder {
        generate_seeder(&format!("{}Seeder", model_name))?;
    }

    if policy {
        generate_policy(&format!("{}Policy", model_name), Some(&model_name))?;
    }

    Ok(())
}

fn generate_middleware(name: &str) -> Result<(), Box<dyn std::error::Error>> {
    println!("{} Generating middleware: {}", "🛡️".yellow(), name.cyan().bold());
    
    let middleware_name = if name.ends_with("Middleware") {
        name.to_string()
    } else {
        format!("{}Middleware", name)
    };
    
    let filename = format!("src/middleware/{}.rs", middleware_name.to_lowercase());
    
    // Create middleware directory if it doesn't exist
    fs::create_dir_all("src/middleware")?;
    
    let content = format!(r#"//! {} - Generated by Torch CLI

use torch_web::{{Request, Response, middleware::Middleware}};
use std::pin::Pin;
use std::future::Future;

pub struct {} {{}}

impl {} {{
    pub fn new() -> Self {{
        Self {{}}
    }}
}}

impl Middleware for {} {{
    fn call(
        &self,
        req: Request,
        next: Box<dyn Fn(Request) -> Pin<Box<dyn Future<Output = Response> + Send + 'static>> + Send + Sync>,
    ) -> Pin<Box<dyn Future<Output = Response> + Send + 'static>> {{
        Box::pin(async move {{
            // TODO: Add your middleware logic here

            // Process request before handler
            println!("Processing request in {}", "{}");

            // Call next middleware/handler
            let response = next(req).await;

            // Process response after handler
            println!("Processing response in {}", "{}");

            response
        }})
    }}
}}
"#, middleware_name, middleware_name, middleware_name, middleware_name, middleware_name, middleware_name, middleware_name, middleware_name);
    
    fs::write(&filename, content)?;
    
    println!("{} Middleware created: {}", "✅".green(), filename);
    
    Ok(())
}

/// Generate API resource controller content
fn generate_api_resource_controller(name: &str) -> String {
    let model_name = name.replace("Controller", "");

    format!(r#"//! {} - Generated by Torch CLI

use torch_web::{{Request, Response, extractors::*}};
use serde::{{Deserialize, Serialize}};

pub struct {} {{}}

#[derive(Deserialize)]
pub struct Create{}Request {{
    // Add your fields here
}}

#[derive(Deserialize)]
pub struct Update{}Request {{
    // Add your fields here
}}

#[derive(Serialize)]
pub struct {}Response {{
    pub id: u32,
    // Add your response fields here
}}

impl {} {{
    /// GET /api/{} - List all {}s
    pub async fn index(Query(params): Query<std::collections::HashMap<String, String>>) -> Response {{
        // TODO: Fetch {}s from database
        Response::ok().json(&serde_json::json!({{
            "data": [],
            "meta": {{
                "total": 0,
                "page": 1,
                "per_page": 15
            }}
        }}))
    }}

    /// GET /api/{}/:id - Show specific {}
    pub async fn show(Path(id): Path<u32>) -> Response {{
        // TODO: Fetch {} from database
        Response::ok().json(&serde_json::json!({{
            "data": {{
                "id": id,
                "message": "Show {} {{}}"
            }}
        }}))
    }}

    /// POST /api/{} - Create new {}
    pub async fn store(Json(req): Json<Create{}Request>) -> Response {{
        // TODO: Create {} in database
        Response::created().json(&serde_json::json!({{
            "data": {{
                "id": 1,
                "message": "{} created successfully"
            }}
        }}))
    }}

    /// PUT /api/{}/:id - Update {}
    pub async fn update(Path(id): Path<u32>, Json(req): Json<Update{}Request>) -> Response {{
        // TODO: Update {} in database
        Response::ok().json(&serde_json::json!({{
            "data": {{
                "id": id,
                "message": "{} updated successfully"
            }}
        }}))
    }}

    /// DELETE /api/{}/:id - Delete {}
    pub async fn destroy(Path(id): Path<u32>) -> Response {{
        // TODO: Delete {} from database
        Response::ok().json(&serde_json::json!({{
            "data": {{
                "id": id,
                "message": "{} deleted successfully"
            }}
        }}))
    }}
}}
"#,
        name, name, model_name, model_name, model_name, name,
        model_name.to_lowercase(), model_name.to_lowercase(), model_name.to_lowercase(),
        model_name.to_lowercase(), model_name, model_name, model_name,
        model_name.to_lowercase(), model_name, name, model_name, model_name,
        model_name.to_lowercase(), model_name, name, model_name, model_name,
        model_name.to_lowercase(), model_name, model_name, model_name
    )
}

/// Generate model content
fn generate_model_content(name: &str) -> String {
    format!(r#"//! {} - Generated by Torch CLI

use serde::{{Deserialize, Serialize}};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct {} {{
    pub id: Option<u32>,
    // TODO: Add your model fields here
    // pub name: String,
    // pub email: String,
    // pub created_at: Option<chrono::DateTime<chrono::Utc>>,
    // pub updated_at: Option<chrono::DateTime<chrono::Utc>>,
}}

impl {} {{
    /// Create a new instance
    pub fn new() -> Self {{
        Self {{
            id: None,
            // TODO: Initialize your fields
        }}
    }}

    /// Find by ID
    pub async fn find(id: u32) -> Result<Option<Self>, Box<dyn std::error::Error + Send + Sync>> {{
        // TODO: Implement database query
        // Example with sqlx:
        // let record = sqlx::query_as!(Self, "SELECT * FROM {}s WHERE id = $1", id)
        //     .fetch_optional(&pool)
        //     .await?;
        // Ok(record)

        Ok(None)
    }}

    /// Find all records
    pub async fn all() -> Result<Vec<Self>, Box<dyn std::error::Error + Send + Sync>> {{
        // TODO: Implement database query
        // Example with sqlx:
        // let records = sqlx::query_as!(Self, "SELECT * FROM {}s")
        //     .fetch_all(&pool)
        //     .await?;
        // Ok(records)

        Ok(Vec::new())
    }}

    /// Save the model
    pub async fn save(&mut self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {{
        // TODO: Implement save logic
        if self.id.is_none() {{
            // Create new record
            self.create().await?;
        }} else {{
            // Update existing record
            self.update().await?;
        }}

        Ok(())
    }}

    /// Create new record
    async fn create(&mut self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {{
        // TODO: Implement create logic
        // Example with sqlx:
        // let id = sqlx::query!("INSERT INTO {}s (...) VALUES (...) RETURNING id")
        //     .fetch_one(&pool)
        //     .await?
        //     .id;
        // self.id = Some(id as u32);

        Ok(())
    }}

    /// Update existing record
    async fn update(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {{
        // TODO: Implement update logic
        // Example with sqlx:
        // sqlx::query!("UPDATE {}s SET ... WHERE id = $1", self.id)
        //     .execute(&pool)
        //     .await?;

        Ok(())
    }}

    /// Delete the record
    pub async fn delete(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {{
        // TODO: Implement delete logic
        // Example with sqlx:
        // sqlx::query!("DELETE FROM {}s WHERE id = $1", self.id)
        //     .execute(&pool)
        //     .await?;

        Ok(())
    }}
}}

impl Default for {} {{
    fn default() -> Self {{
        Self::new()
    }}
}}
"#, name, name, name, name.to_lowercase(), name.to_lowercase(), name.to_lowercase(), name.to_lowercase(), name.to_lowercase(), name)
}

/// Generate migration
fn generate_migration(name: &str, create: Option<&str>, table: Option<&str>) -> Result<(), Box<dyn std::error::Error>> {
    println!("{} Generating migration: {}", "📝".yellow(), name.cyan().bold());

    let timestamp = chrono::Utc::now().format("%Y_%m_%d_%H%M%S");
    let filename = format!("migrations/{}_{}.rs", timestamp, name);

    // Create migrations directory if it doesn't exist
    fs::create_dir_all("migrations")?;

    let content = if let Some(table_name) = create {
        crate::cli::generators::generate_create_table_migration(name, table_name)
    } else if let Some(table_name) = table {
        crate::cli::generators::generate_modify_table_migration(name, table_name)
    } else {
        crate::cli::generators::generate_basic_migration(name)
    };

    fs::write(&filename, content)?;

    println!("{} Migration created: {}", "✅".green(), filename);

    Ok(())
}

/// Generate seeder
fn generate_seeder(name: &str) -> Result<(), Box<dyn std::error::Error>> {
    println!("{} Generating seeder: {}", "🌱".yellow(), name.cyan().bold());

    let seeder_name = if name.ends_with("Seeder") {
        name.to_string()
    } else {
        format!("{}Seeder", name)
    };

    let filename = format!("src/seeders/{}.rs", seeder_name.to_lowercase());

    // Create seeders directory if it doesn't exist
    fs::create_dir_all("src/seeders")?;

    let content = crate::cli::generators::generate_seeder_content(&seeder_name);
    fs::write(&filename, content)?;

    println!("{} Seeder created: {}", "✅".green(), filename);

    Ok(())
}

/// Generate factory
fn generate_factory(name: &str, model: Option<&str>) -> Result<(), Box<dyn std::error::Error>> {
    println!("{} Generating factory: {}", "🏭".yellow(), name.cyan().bold());

    let factory_name = if name.ends_with("Factory") {
        name.to_string()
    } else {
        format!("{}Factory", name)
    };

    let default_model = name.replace("Factory", "");
    let model_name = model.unwrap_or(&default_model);

    let filename = format!("src/factories/{}.rs", factory_name.to_lowercase());

    // Create factories directory if it doesn't exist
    fs::create_dir_all("src/factories")?;

    let content = crate::cli::generators::generate_factory_content(&factory_name, &model_name);
    fs::write(&filename, content)?;

    println!("{} Factory created: {}", "✅".green(), filename);

    Ok(())
}

/// Generate policy
fn generate_policy(name: &str, model: Option<&str>) -> Result<(), Box<dyn std::error::Error>> {
    println!("{} Generating policy: {}", "🛡️".yellow(), name.cyan().bold());

    let policy_name = if name.ends_with("Policy") {
        name.to_string()
    } else {
        format!("{}Policy", name)
    };

    let default_model = name.replace("Policy", "");
    let model_name = model.unwrap_or(&default_model);

    let filename = format!("src/policies/{}.rs", policy_name.to_lowercase());

    // Create policies directory if it doesn't exist
    fs::create_dir_all("src/policies")?;

    let content = crate::cli::generators::generate_policy_content(&policy_name, &model_name);
    fs::write(&filename, content)?;

    println!("{} Policy created: {}", "✅".green(), filename);

    Ok(())
}

/// Generate event
fn generate_event(name: &str) -> Result<(), Box<dyn std::error::Error>> {
    println!("{} Generating event: {}", "📡".yellow(), name.cyan().bold());

    let event_name = if name.ends_with("Event") {
        name.to_string()
    } else {
        name.to_string()
    };

    let filename = format!("src/events/{}.rs", event_name.to_lowercase());

    // Create events directory if it doesn't exist
    fs::create_dir_all("src/events")?;

    let content = crate::cli::generators::generate_event_content(&event_name);
    fs::write(&filename, content)?;

    println!("{} Event created: {}", "✅".green(), filename);

    Ok(())
}

/// Generate listener
fn generate_listener(name: &str, event: Option<&str>) -> Result<(), Box<dyn std::error::Error>> {
    println!("{} Generating listener: {}", "👂".yellow(), name.cyan().bold());

    let listener_name = if name.ends_with("Listener") {
        name.to_string()
    } else {
        name.to_string()
    };

    let event_name = event.unwrap_or("SomeEvent");

    let filename = format!("src/listeners/{}.rs", listener_name.to_lowercase());

    // Create listeners directory if it doesn't exist
    fs::create_dir_all("src/listeners")?;

    let content = crate::cli::generators::generate_listener_content(&listener_name, event_name);
    fs::write(&filename, content)?;

    println!("{} Listener created: {}", "✅".green(), filename);

    if let Some(event_name) = event {
        println!("{} Listening for event: {}", "👂".blue(), event_name.cyan());
    }

    Ok(())
}

/// Generate job
fn generate_job(name: &str, sync: bool) -> Result<(), Box<dyn std::error::Error>> {
    println!("{} Generating job: {}", "⚡".yellow(), name.cyan().bold());

    let job_name = if name.ends_with("Job") {
        name.to_string()
    } else {
        format!("{}Job", name)
    };

    let filename = format!("src/jobs/{}.rs", job_name.to_lowercase());

    // Create jobs directory if it doesn't exist
    fs::create_dir_all("src/jobs")?;

    let content = crate::cli::generators::generate_job_content(&job_name, sync);
    fs::write(&filename, content)?;

    println!("{} Job created: {}", "✅".green(), filename);

    if sync {
        println!("{} Synchronous job (will run immediately)", "⚡".blue());
    } else {
        println!("{} Asynchronous job (will be queued)", "📋".blue());
    }

    Ok(())
}

/// Generate notification
fn generate_notification(name: &str) -> Result<(), Box<dyn std::error::Error>> {
    println!("{} Generating notification: {}", "📬".yellow(), name.cyan().bold());

    let notification_name = if name.ends_with("Notification") {
        name.to_string()
    } else {
        format!("{}Notification", name)
    };

    let filename = format!("src/notifications/{}.rs", notification_name.to_lowercase());

    // Create notifications directory if it doesn't exist
    fs::create_dir_all("src/notifications")?;

    let content = crate::cli::generators::generate_notification_content(&notification_name);
    fs::write(&filename, content)?;

    println!("{} Notification created: {}", "✅".green(), filename);

    Ok(())
}

/// Generate command
fn generate_command(name: &str) -> Result<(), Box<dyn std::error::Error>> {
    println!("{} Generating command: {}", "⚙️".yellow(), name.cyan().bold());

    let command_name = if name.ends_with("Command") {
        name.to_string()
    } else {
        format!("{}Command", name)
    };

    let filename = format!("src/commands/{}.rs", command_name.to_lowercase());

    // Create commands directory if it doesn't exist
    fs::create_dir_all("src/commands")?;

    let content = crate::cli::generators::generate_command_content(&command_name);
    fs::write(&filename, content)?;

    println!("{} Command created: {}", "✅".green(), filename);
    println!("{} Don't forget to register the command in your CLI", "💡".blue());

    Ok(())
}

fn generate_template(name: &str, layout: Option<&str>) -> Result<(), Box<dyn std::error::Error>> {
    println!("{} Generating template: {}", "🎨".yellow(), name.cyan().bold());
    
    let filename = format!("templates/{}.ember", name);
    
    // Create templates directory if it doesn't exist
    if let Some(parent) = Path::new(&filename).parent() {
        fs::create_dir_all(parent)?;
    }
    
    let layout_name = layout.unwrap_or("layout");
    
    let content = format!(r#"@extends('{}')

@section('title', '{}')

@section('content')
    <div class="container">
        <h1>{}</h1>
        <p>This template was generated by Torch CLI.</p>
        
        {{{{-- Add your content here --}}}}
    </div>
@endsection
"#, layout_name, name.replace('/', " - "), name.replace('/', " "));

    fs::write(&filename, content)?;

    println!("{} Template created: {}", "✅".green(), filename);

    Ok(())
}
